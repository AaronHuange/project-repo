const myexpress = require('express');
<%_ if (CONSOLE_LOG) { -%>
<%- "const logger = require('morgan');" %>
<%_ } -%>
const router = require('./routers/routers.js');
<%_ if(TYPE !== 'Websocket项目') { -%>
<%- "const bodyParser = require('body-parser');" %>
<%- "const favicon = require('serve-favicon');" %>
<%- "const session = require('express-session');" %>
<%- "const cookie = require('cookie-parser');" %>
<%_ } -%>
<%_ if (CORS) { -%>
<%- "const cors = require('cors'); // 允许跨域" %>
<%_ } -%>
<%_ if(TYPE !== 'HTTP接口项目') { -%>
<%- "const expressWs = require('express-ws')" %>
<%_ } -%>
const { getCommandPath, existFile } = require('./lib/file/fileutil');
const fs = require('fs'); // 引入 WebSocket 包

const myapp = myexpress();
<%_ if (CONSOLE_LOG) { -%>
<%- "myapp.use(logger('dev')); // 控制台打印访问日志" %>
<%_ } -%>
<%_ if (TYPE !== 'HTTP接口项目') { -%>
<%- 'expressWs(myapp); // myapp需要expressWs一次,router中配置websocket路由时也要expressWs一次' %>
<%_ } -%>
<%_ if (TYPE !== 'Websocket项目') { -%>
<%- 'myapp.use(cookie()); // 启用cookie' %>
<%- 'myapp.use(session({ // 启用session：使用 resp.session.data 、resp.session.data.xxx = any 、 resp.session.data = {}' %>
<%- "  name: 'sessionName', // name不能包含中文,否则会报错：name无效" %>
<%- "  secret: '秘钥用来干嘛的'," %>
<%- "  resave: true," %>
<%- "  rolling: true," %>
<%- "  cookie: {" %>
<%- "    maxAge: 60 * 1000" %>
<%- "  }," %>
<%- "  saveUninitialized: true" %>
<%- "}));" %>
<%_ } -%>
<%_ if (CORS) { -%>
<%- "myapp.use(cors());" %>
<%_ } -%>
<%_ if (TYPE !== 'Websocket项目') { -%>
<%- "myapp.use(bodyParser.urlencoded({ extended: false })) // 配置post方式的body解析(否则req.body拿不到)" %>
<%- "myapp.use(bodyParser.json()); // 配置post方式的body转为json" %>
<%_ } -%>
myapp.use(router); // 先匹配接口
<%_ if (TYPE !== 'Websocket项目') { -%>
<%- "myapp.use(myexpress.static(__dirname + '/static')); // 设置可直接访问的静态目录, 再匹配静态资源" %>
<%- "// myapp.use(favicon(__dirname + '/resource/images/jb.png')); // 配置网页的favicon(纯接口项目建议不配置)" %>
<%_ } -%>
myapp.use((req, resp) => {  // 配置404
  resp.status(404);
  resp.send({ code: 404 });
  // resp.sendFile('件路径');
  // resp.redirect('重定向地址');
});
myapp.listen(<%- PORT %>, () => {
  console.log('服务启动成功：<%- PORT %>');
});
