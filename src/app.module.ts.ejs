import { Module } from '@nestjs/common';
import { HttpModule } from '@nestjs/axios';
import { WinstonModule } from 'nest-winston';
<%_ if (TYPE === 'GraphQL') { -%>
import { DirectiveLocation, GraphQLDirective } from 'graphql';
<%_ } -%>
import { TypeOrmModule, TypeOrmModuleAsyncOptions } from '@nestjs/typeorm';
<%_ if (TYPE === 'GraphQL') { -%>
import { GraphQLModule } from '@nestjs/graphql';
<%_ } -%>
import { ApolloDriver, ApolloDriverConfig } from '@nestjs/apollo';
import services from './services';
import controllers from '@/controllers';
import config from './config';
import models from './models';
import { FormResolver } from '@/modules/form/form.resolver';
import { FormService } from '@/modules/form/form.service';
import { ComponentResolver } from '@/modules/component/component.resolver';
import { ComponentService } from '@/modules/component/component.service';
import { AppResolver } from '@/modules/app/app.resolver';
import { AppService } from '@/modules/app/app.service';
<%_ if (TYPE === 'GraphQL') { -%>
import { DateScalar } from '@/modules/common/scalars/date.scalar';
import { JSONScalar } from '@/modules/common/scalars/json.scalar';
import { JsonObjectScalar } from '@/modules/common/scalars/json_object.scalar';
<%_ } -%>
import { FormPermissionResolver } from './modules/permission/form_permission.resolver';
import { FormPermissionService } from './modules/permission/form_permission.service';
import { FormTemplateResolver } from '@/modules/template/form-template.resolver';
import { FormTemplateService } from '@/modules/template/form-template.service';
import { FormPublishResolver } from '@/modules/form/form.publish.resolver';
import { UserResolver } from '@/modules/user/user.resolver';
import { UserService } from '@/modules/user/user.service';

@Module({
  imports: [
    HttpModule,
    TypeOrmModule.forFeature(models),
    TypeOrmModule.forRootAsync({
      useFactory: () => ({
        ...config.typeOrm,
      } as TypeOrmModuleAsyncOptions),
    }),
    <%_ if (TYPE === 'GraphQL') { -%>
    GraphQLModule.forRoot<ApolloDriverConfig>({
      driver: ApolloDriver,
      autoSchemaFile: 'schema.gql',
      buildSchemaOptions: {
        directives: [
          new GraphQLDirective({
            name: 'upper',
            locations: [DirectiveLocation.FIELD_DEFINITION],
          }),
        ],
      },
    }),
    <%_ } -%>
    WinstonModule.forRootAsync({
      useFactory: () => ({
        // options
      }),
      inject: [],
    }),
  ],
  controllers,
  providers: [
    // graphql
    FormResolver,
    FormPublishResolver,
    FormService,
    ComponentResolver,
    ComponentService,
    FormPermissionResolver,
    FormPermissionService,
    FormTemplateResolver,
    FormTemplateService,
    AppResolver,
    AppService,
    UserResolver,
    UserService,
    <%_ if (TYPE === 'GraphQL') { -%>
    // graphql scalar
    DateScalar,
    JSONScalar,
    JsonObjectScalar,
    <%_ } -%>
    // service
    ...services,
  ],
})
export class AppModule {
}
