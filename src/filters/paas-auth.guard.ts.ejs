import {
  CanActivate, ExecutionContext, Injectable, UnauthorizedException,
} from '@nestjs/common';
<%_ if (TYPE === 'GraphQL') { -%>
import { GqlContextType, GqlExecutionContext } from '@nestjs/graphql';
<%_ } -%>
import { Reflector } from '@nestjs/core';
import { FastifyRequest } from 'fastify';
import { Observable } from 'rxjs';
import { ApiService } from '@/modules/api/service';
import { ICloudUserInfo } from '@/modules/api/type';

<%_ if (TYPE === 'GraphQL') { -%>
export interface GqlContextRequest<T = any> {
  req: FastifyRequest<T>;
}
<%_ } -%>

@Injectable()
export class PaaSAuthGuard implements CanActivate {
  constructor(private reflector: Reflector, private readonly apiService: ApiService) {
  }

  canActivate(context: ExecutionContext): boolean | Promise<boolean> | Observable<boolean> {
    let authorization = '';
    let setCurrentUserCb: (currentUser: ICloudUserInfo) => void;
    <%_ if (TYPE === 'GraphQL') { -%>
    if (context.getType<GqlContextType>() === 'graphql') {
      const ctx = GqlExecutionContext.create(context);
      const req = ctx.getContext<GqlContextRequest<{
        Headers: {
          currentUser?: ICloudUserInfo;
        };
      }>>();
      authorization = req.req.headers.authorization;
      setCurrentUserCb = (user) => {
        req.req.headers.currentUser = user;
      };
    } else {
      const req = context.switchToHttp()
        .getRequest<
          FastifyRequest<{
            Headers: {
              currentUser?: ICloudUserInfo;
            };
          }>
        >();
      authorization = req.headers.authorization;
      setCurrentUserCb = (user) => {
        req.headers.currentUser = user;
      };
    }
    <%_ } -%>
    <%_ if (TYPE !== 'GraphQL') { -%>
    const req = context.switchToHttp()
      .getRequest<
        FastifyRequest<{
          Headers: {
            currentUser?: ICloudUserInfo;
          };
        }>
      >();
      authorization = req.headers.authorization;
      setCurrentUserCb = (user) => {
        req.headers.currentUser = user;
      };
    <%_ } -%>
    if (!authorization) {
      throw new UnauthorizedException();
    }
    return new Promise<boolean>((resolve, reject) => {
      this.apiService
        .getUserInfo(authorization)
        .then((userInfoResp) => {
          if (!userInfoResp || !userInfoResp.success || !userInfoResp.data) {
            throw new UnauthorizedException();
          }
          // eslint-disable-next-line no-param-reassign
          userInfoResp.data.authorization = authorization;
          setCurrentUserCb(userInfoResp.data);
          resolve(true);
        })
        .catch(reject);
    });
  }
}
