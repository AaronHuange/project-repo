import * as lodash from 'lodash';
import {
  ExceptionFilter, Catch, HttpException, ArgumentsHost, HttpStatus, Logger,
} from '@nestjs/common';
<%_ if (TYPE === 'GraphQL') { -%>
import { GqlContextType } from '@nestjs/graphql';
<%_ } -%>
import { THttpErrorResponse, TExceptionOption } from '@/interfaces/response.interface';
import { NOT_FOUND_ERROR, DEFAULT_ERROR } from '@/constants/error/general.constant';

/**
 * @class HttpExceptionFilter
 * @classdesc 拦截全局抛出的所有异常，同时任何错误将在这里被规范化输出 THttpErrorResponse
 */
@Catch()
export class HttpExceptionFilter implements ExceptionFilter {
  private readonly logger = new Logger(HttpExceptionFilter.name);

  catch(exception: HttpException, host: ArgumentsHost) {
    this.logger.warn(exception.toString());
    <%_ if (TYPE === 'GraphQL') { -%>
    if (host.getType<GqlContextType>() === 'graphql') {
      return;
    }
    <%_ } -%>
    const request = host.switchToHttp()
      .getRequest();
    const response = host.switchToHttp()
      .getResponse();
    const status = exception.getStatus() || HttpStatus.INTERNAL_SERVER_ERROR;
    try {
      const errorOption: TExceptionOption = exception.getResponse() as TExceptionOption;
      const isString = (value): value is string => lodash.isString(value);
      const errCode = isString(errorOption)
        ? NOT_FOUND_ERROR.code
        : errorOption.code || NOT_FOUND_ERROR.code;
      const errMessage = isString(errorOption) ? errorOption : errorOption.msg;
      const errorInfo = isString(errorOption) ? null : errorOption.errors;
      const parentErrorInfo = errorInfo ? String(errorInfo) : null;
      const isChildrenError = errorInfo && errorInfo.code && errorInfo.msg;
      const resultError = (isChildrenError && errorInfo.msg) || parentErrorInfo;
      const data: THttpErrorResponse = {
        code: `${errCode}`,
        message: errMessage,
        success: false,
        errors: resultError,
      };
      // 对默认的 404 进行特殊处理
      if (status === HttpStatus.NOT_FOUND) {
        data.errors = '资源不存在';
        data.message = `接口 ${request.method} -> ${request.url} 无效`;
      }
      response.code(status)
        .send(data);
    } catch (err) {
      response.code(status)
        .send(DEFAULT_ERROR);
    }
  }
}
